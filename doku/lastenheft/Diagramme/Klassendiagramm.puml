@startuml
 'https://plantuml.com/class-diagram

class Main

class Game{
- user : User
- ctrl : Controll
- csv : CSVReader

+ Game(pCsv : CSVReader, pCtrl : Controll)
+ startGame(pGaemmode : Gamemode)
+ setUser() : User
+ setCSV() : void
+ setCtrl() : void
+ getUser() : User
+ getCtrl() : Controll
+ getCsv() : CSVReader
}


class Controll{

- gui : Gui
- leaderboard : Leaderboard
- options : Options
- gamemode : Gamemode

+ setGamemode(pGamemode : Gamemode)
+ getGui() : Gui
+ getLeaderboard() : Leaderboard
+ getGamemode() : Gamemode
+ getOptions() : Options
}

class User{
- points : int

+ setPoints(pPoints : String) : void
+ getPoints() : String
}

abstract class Person{
- name : String
- age : int

+ setName(pName : String) : void
+ setAge(pAge : int) : void
+ getName() : String
+ getAge() : String
}

class Gui{

}

class Leaderboard{
- users : User[10]
 }

class CSVReader{
+ readCSVList(path : String) : List<Questions>
+ readCSVQueue(path : String) : Queue<Questions>
+ readCSVStack(path : String) : Stack<Questions>

}


class Questions{
- question : String
- answers : String[4]
}


class Gamemode{

}

class ModeNormal extends Gamemode{
- questions : List<Questions>
}

class ModeSurvival extends Gamemode{
- questions : Stack<Questions>
}

class ModeJeopardy extends Gamemode{
- questions : Queue<Questions>
}

class Node{
- context : T
- next : Node<T>

+ getContext() : T
+ setContext(pContext : T) : void
+ getNext() : Node<T>
+ setNext(pNode : Node<T>) : void
}

class List{
- first : Node<T>
- aktuelleNode : Node<T>

+ isEmpty() : boolean
+ hasAccess() : boolean
+ next() : void
+ toFirst() : void
+ toLast() : void
+ getObject() : T
+ setObject() : void
+ append(pContext : T) : void
+ insert(pContext : T) : void
+ concat(pList : List<T>) : void
+ remove() : void
}

class Stack{
- first : Node<T>

+ isEmpty() : boolean
+ enqueue(pObject : T) : void
+ dequeue() : void
+ front() : T
}

class Queue{
- first : Node<T>

+ isEmpty() : boolean
+ push(pObject : T) : void
+ pop() : void
+ top() : T
}

Main *-- Game

Person <|-- User

Node --o Stack
Node --o Queue
Node --o List
@enduml